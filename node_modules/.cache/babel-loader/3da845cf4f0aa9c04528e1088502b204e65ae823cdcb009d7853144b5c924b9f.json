{"ast":null,"code":"var _jsxFileName = \"D:\\\\Btech\\\\Project\\\\ERP\\\\planning\\\\src\\\\Components\\\\OrdersCalendarView.js\",\n  _s = $RefreshSig$();\n// components/OrdersCalendarView.js\nimport React, { useState } from 'react';\nimport './OrdersCalendarView.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OrdersCalendarView = () => {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(null);\n\n  // Function to get the number of days in a month\n  const getDaysInMonth = (month, year) => {\n    return new Date(year, month, 0).getDate();\n  };\n\n  // Function to generate dates for the current month\n  const generateDates = () => {\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n    const currentMonth = currentDate.getMonth() + 1;\n    const daysInMonth = getDaysInMonth(currentMonth, currentYear);\n    const dates = [];\n\n    // Generate dates for the current month\n    for (let day = 1; day <= daysInMonth; day++) {\n      dates.push(`${day < 10 ? '0' : ''}${day}/${currentMonth < 10 ? '0' : ''}${currentMonth}/${currentYear}`);\n    }\n\n    // Generate dates for the previous month\n    const previousMonth = currentMonth === 1 ? 12 : currentMonth - 1;\n    const previousYear = currentMonth === 1 ? currentYear - 1 : currentYear;\n    const daysInPreviousMonth = getDaysInMonth(previousMonth, previousYear);\n    const firstDayIndex = new Date(`${currentMonth}/01/${currentYear}`).getDay();\n    for (let i = firstDayIndex - 1; i >= 0; i--) {\n      dates.unshift(`${daysInPreviousMonth - i}/${previousMonth < 10 ? '0' : ''}${previousMonth}/${previousYear}`);\n    }\n\n    // Generate dates for the next month\n    const nextMonth = currentMonth === 12 ? 1 : currentMonth + 1;\n    const nextYear = currentMonth === 12 ? currentYear + 1 : currentYear;\n    const daysInNextMonth = getDaysInMonth(nextMonth, nextYear);\n    const lastDayIndex = new Date(`${currentMonth}/${daysInMonth}/${currentYear}`).getDay();\n    for (let i = 1; i <= 6 - lastDayIndex; i++) {\n      dates.push(`${i}/${nextMonth < 10 ? '0' : ''}${nextMonth}/${nextYear}`);\n    }\n    return dates;\n  };\n  const handleDateClick = date => {\n    setSelectedDate(date);\n    // Implement logic to display orders for the selected date\n    // You can fetch orders from your data source based on the selected date\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Orders Calendar View\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-grid\",\n      children: generateDates().map((date, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `date-box ${date === selectedDate ? 'selected' : ''}`,\n        onClick: () => handleDateClick(date),\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"date\",\n          children: date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(OrdersCalendarView, \"rhrbPH1/NtfhiyDl62tZ0yGffOM=\");\n_c = OrdersCalendarView;\nexport default OrdersCalendarView;\nvar _c;\n$RefreshReg$(_c, \"OrdersCalendarView\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","OrdersCalendarView","_s","selectedDate","setSelectedDate","getDaysInMonth","month","year","Date","getDate","generateDates","currentDate","currentYear","getFullYear","currentMonth","getMonth","daysInMonth","dates","day","push","previousMonth","previousYear","daysInPreviousMonth","firstDayIndex","getDay","i","unshift","nextMonth","nextYear","daysInNextMonth","lastDayIndex","handleDateClick","date","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","_c","$RefreshReg$"],"sources":["D:/Btech/Project/ERP/planning/src/Components/OrdersCalendarView.js"],"sourcesContent":["// components/OrdersCalendarView.js\r\nimport React, { useState } from 'react';\r\nimport './OrdersCalendarView.css';\r\n\r\nconst OrdersCalendarView = () => {\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n\r\n  // Function to get the number of days in a month\r\n  const getDaysInMonth = (month, year) => {\r\n    return new Date(year, month, 0).getDate();\r\n  };\r\n\r\n  // Function to generate dates for the current month\r\n  const generateDates = () => {\r\n    const currentDate = new Date();\r\n    const currentYear = currentDate.getFullYear();\r\n    const currentMonth = currentDate.getMonth() + 1;\r\n\r\n    const daysInMonth = getDaysInMonth(currentMonth, currentYear);\r\n\r\n    const dates = [];\r\n\r\n    // Generate dates for the current month\r\n    for (let day = 1; day <= daysInMonth; day++) {\r\n      dates.push(`${day < 10 ? '0' : ''}${day}/${currentMonth < 10 ? '0' : ''}${currentMonth}/${currentYear}`);\r\n    }\r\n\r\n    // Generate dates for the previous month\r\n    const previousMonth = currentMonth === 1 ? 12 : currentMonth - 1;\r\n    const previousYear = currentMonth === 1 ? currentYear - 1 : currentYear;\r\n    const daysInPreviousMonth = getDaysInMonth(previousMonth, previousYear);\r\n    const firstDayIndex = new Date(`${currentMonth}/01/${currentYear}`).getDay();\r\n    for (let i = firstDayIndex - 1; i >= 0; i--) {\r\n      dates.unshift(`${daysInPreviousMonth - i}/${previousMonth < 10 ? '0' : ''}${previousMonth}/${previousYear}`);\r\n    }\r\n\r\n    // Generate dates for the next month\r\n    const nextMonth = currentMonth === 12 ? 1 : currentMonth + 1;\r\n    const nextYear = currentMonth === 12 ? currentYear + 1 : currentYear;\r\n    const daysInNextMonth = getDaysInMonth(nextMonth, nextYear);\r\n    const lastDayIndex = new Date(`${currentMonth}/${daysInMonth}/${currentYear}`).getDay();\r\n    for (let i = 1; i <= 6 - lastDayIndex; i++) {\r\n      dates.push(`${i}/${nextMonth < 10 ? '0' : ''}${nextMonth}/${nextYear}`);\r\n    }\r\n\r\n    return dates;\r\n  };\r\n\r\n  const handleDateClick = (date) => {\r\n    setSelectedDate(date);\r\n    // Implement logic to display orders for the selected date\r\n    // You can fetch orders from your data source based on the selected date\r\n  };\r\n\r\n  return (\r\n    <div className=\"calendar\">\r\n      <h2>Orders Calendar View</h2>\r\n      <div className=\"calendar-grid\">\r\n        {generateDates().map((date, index) => (\r\n          <div key={index} className={`date-box ${date === selectedDate ? 'selected' : ''}`} onClick={() => handleDateClick(date)}>\r\n            <span className=\"date\">{date}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OrdersCalendarView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}